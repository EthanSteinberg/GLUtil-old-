#version 150

in vec2 mid_TextCord;
in float onestepu, onestepv;

uniform sampler2D in_Texture;
uniform bool textRenderMode;

out vec4 FragColor;

void main(void)
{

   if (textRenderMode)
   {
      ivec2 size = textureSize(in_Texture,0);

      int texw = size.x *2;
      int texh = size.y * 2;

      vec2 uv = mid_TextCord * vec2(texw, texh);

      // Compute texel-local (u,v) coordinates for the four closest texels
      vec2 uv00 = floor(uv - vec2(0.5)); // Lower left corner of lower left texel
      vec2 uvthis = floor(uv); // Lower left corner of texel containing (u,v)
      vec2 uvlerp = uv - uv00 - vec2(0.5); // Texel-local lerp blends [0,1]

      // Perform explicit texture interpolation of D coefficient.
      // This works around the currently very bad texture interpolation
      // precision in ATI hardware.

      // Center st00 on lower left texel and rescale to [0,1] for texture lookup
      vec2 st00 = (uv00  + vec2(0.5)) * vec2(onestepu, onestepv);

      // Compute g_u, g_v, D coefficients from four closest 8-bit RGBA texels
      vec4 rawtex00 = texture2D(in_Texture, st00);
      vec4 rawtex10 = texture2D(in_Texture, st00 + vec2(0.5*onestepu, 0.0));
      vec4 rawtex01 = texture2D(in_Texture, st00 + vec2(0.0, 0.5*onestepv));
      vec4 rawtex11 = texture2D(in_Texture, st00 + vec2(0.5*onestepu, 0.5*onestepv));

      // Restore the value for D from its 8-bit encoding
      vec2 D00_10 = 16.0*(vec2(rawtex00.r, rawtex10.r)-0.50196);
      vec2 D01_11 = 16.0*(vec2(rawtex01.r, rawtex11.r)-0.50196);

      // Interpolate D between four closest texels
      vec2 uvlocal = fract(uv)-0.5; // Texel-local uv coordinates [-0.5,0.5]
      // Interpolate along v
      vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);
      // Interpolate along u
      float D = mix(D0_1.x, D0_1.y, uvlerp.x);

      // Perform anisotropic analytic antialiasing (fwidth() is slightly wrong)
      float aastep = length(vec2(dFdx(D), dFdy(D)));

      // 'pattern' is 1 where D>0, 0 where D<0, with proper AA around D=0.
      float pattern = smoothstep(-aastep, aastep, D);

      // Final fragment color
      FragColor = vec4(1.0, 1.0, 1.0, pattern);
   }

   else
   {
      FragColor = texture(in_Texture,mid_TextCord);
   }
}
